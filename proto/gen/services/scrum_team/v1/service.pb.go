// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/services/scrum_team/v1/service.proto

package scrum_team

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	v1 "github.com/tennashi/semer/proto/gen/data/v1"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindTeamByIDRequest struct {
	TeamId               uint64   `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindTeamByIDRequest) Reset()         { *m = FindTeamByIDRequest{} }
func (m *FindTeamByIDRequest) String() string { return proto.CompactTextString(m) }
func (*FindTeamByIDRequest) ProtoMessage()    {}
func (*FindTeamByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_936823affc3a32fb, []int{0}
}

func (m *FindTeamByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindTeamByIDRequest.Unmarshal(m, b)
}
func (m *FindTeamByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindTeamByIDRequest.Marshal(b, m, deterministic)
}
func (m *FindTeamByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindTeamByIDRequest.Merge(m, src)
}
func (m *FindTeamByIDRequest) XXX_Size() int {
	return xxx_messageInfo_FindTeamByIDRequest.Size(m)
}
func (m *FindTeamByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindTeamByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindTeamByIDRequest proto.InternalMessageInfo

func (m *FindTeamByIDRequest) GetTeamId() uint64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

type FindTeamByIDResponse struct {
	Team                 *v1.ScrumTeam `protobuf:"bytes,1,opt,name=team,proto3" json:"team,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FindTeamByIDResponse) Reset()         { *m = FindTeamByIDResponse{} }
func (m *FindTeamByIDResponse) String() string { return proto.CompactTextString(m) }
func (*FindTeamByIDResponse) ProtoMessage()    {}
func (*FindTeamByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_936823affc3a32fb, []int{1}
}

func (m *FindTeamByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindTeamByIDResponse.Unmarshal(m, b)
}
func (m *FindTeamByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindTeamByIDResponse.Marshal(b, m, deterministic)
}
func (m *FindTeamByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindTeamByIDResponse.Merge(m, src)
}
func (m *FindTeamByIDResponse) XXX_Size() int {
	return xxx_messageInfo_FindTeamByIDResponse.Size(m)
}
func (m *FindTeamByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindTeamByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindTeamByIDResponse proto.InternalMessageInfo

func (m *FindTeamByIDResponse) GetTeam() *v1.ScrumTeam {
	if m != nil {
		return m.Team
	}
	return nil
}

func init() {
	proto.RegisterType((*FindTeamByIDRequest)(nil), "services.scrum_team.v1.FindTeamByIDRequest")
	proto.RegisterType((*FindTeamByIDResponse)(nil), "services.scrum_team.v1.FindTeamByIDResponse")
}

func init() {
	proto.RegisterFile("proto/services/scrum_team/v1/service.proto", fileDescriptor_936823affc3a32fb)
}

var fileDescriptor_936823affc3a32fb = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2f, 0x4e, 0x2e, 0x2a, 0xcd,
	0x8d, 0x2f, 0x49, 0x4d, 0xcc, 0xd5, 0x2f, 0x33, 0x84, 0x09, 0xeb, 0x81, 0x15, 0x09, 0x89, 0xc1,
	0x54, 0xe9, 0x21, 0x54, 0xe9, 0x95, 0x19, 0x4a, 0xc9, 0x41, 0xcc, 0x48, 0x49, 0x2c, 0x49, 0x04,
	0x6b, 0x42, 0x48, 0x82, 0x25, 0x94, 0xf4, 0xb8, 0x84, 0xdd, 0x32, 0xf3, 0x52, 0x42, 0x52, 0x13,
	0x73, 0x9d, 0x2a, 0x3d, 0x5d, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xc4, 0xb9, 0xd8,
	0x41, 0x8a, 0xe2, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82, 0xd8, 0x40, 0x5c, 0xcf,
	0x14, 0x25, 0x3b, 0x2e, 0x11, 0x54, 0xf5, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x6a, 0x5c,
	0x2c, 0x20, 0x15, 0x60, 0xd5, 0xdc, 0x46, 0x42, 0x7a, 0x20, 0x0b, 0xf5, 0xca, 0x0c, 0xf5, 0x82,
	0x41, 0x16, 0x82, 0x54, 0x07, 0x81, 0xe5, 0x8d, 0x2a, 0xb8, 0x38, 0xe1, 0x42, 0x42, 0xd9, 0x5c,
	0x3c, 0xc8, 0x86, 0x09, 0x69, 0xeb, 0x61, 0xf7, 0x85, 0x1e, 0x16, 0x27, 0x4a, 0xe9, 0x10, 0xa7,
	0x18, 0xe2, 0x3e, 0x25, 0x06, 0x27, 0xf7, 0x28, 0xd7, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd,
	0xe4, 0xfc, 0x5c, 0xfd, 0x92, 0xd4, 0xbc, 0xbc, 0xc4, 0xe2, 0x8c, 0x4c, 0xfd, 0xe2, 0xd4, 0xdc,
	0xd4, 0x22, 0x7d, 0x48, 0x28, 0xa5, 0xa7, 0xe6, 0xe1, 0x08, 0x6d, 0x6b, 0x04, 0x2f, 0x89, 0x0d,
	0xac, 0xd8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x62, 0x85, 0x49, 0x9f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScrumTeamClient is the client API for ScrumTeam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScrumTeamClient interface {
	FindTeamByID(ctx context.Context, in *FindTeamByIDRequest, opts ...grpc.CallOption) (*FindTeamByIDResponse, error)
}

type scrumTeamClient struct {
	cc *grpc.ClientConn
}

func NewScrumTeamClient(cc *grpc.ClientConn) ScrumTeamClient {
	return &scrumTeamClient{cc}
}

func (c *scrumTeamClient) FindTeamByID(ctx context.Context, in *FindTeamByIDRequest, opts ...grpc.CallOption) (*FindTeamByIDResponse, error) {
	out := new(FindTeamByIDResponse)
	err := c.cc.Invoke(ctx, "/services.scrum_team.v1.ScrumTeam/FindTeamByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScrumTeamServer is the server API for ScrumTeam service.
type ScrumTeamServer interface {
	FindTeamByID(context.Context, *FindTeamByIDRequest) (*FindTeamByIDResponse, error)
}

func RegisterScrumTeamServer(s *grpc.Server, srv ScrumTeamServer) {
	s.RegisterService(&_ScrumTeam_serviceDesc, srv)
}

func _ScrumTeam_FindTeamByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTeamByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrumTeamServer).FindTeamByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.scrum_team.v1.ScrumTeam/FindTeamByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrumTeamServer).FindTeamByID(ctx, req.(*FindTeamByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScrumTeam_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.scrum_team.v1.ScrumTeam",
	HandlerType: (*ScrumTeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTeamByID",
			Handler:    _ScrumTeam_FindTeamByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/scrum_team/v1/service.proto",
}
